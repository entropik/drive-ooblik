version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: drive-ooblik-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-drive_ooblik}
      POSTGRES_USER: ${DB_USER:-ooblik}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks: [drive-ooblik-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ooblik} -d ${DB_NAME:-drive_ooblik}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: drive-ooblik-api
    restart: unless-stopped
    environment:
      # DB
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-drive_ooblik}
      DB_USER: ${DB_USER:-ooblik}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}

      # Backend
      NODE_ENV: production
      PORT: 3001
      # URL publique (via CloudPanel) — on fera /api sur le même domaine
      API_BASE_URL: ${API_BASE_URL:-https://fichiers.ooblik.com/api}
      FRONTEND_URL: ${FRONTEND_URL:-https://fichiers.ooblik.com}

      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_EXPIRES_IN: 4h
      JWT_ADMIN_EXPIRES_IN: 24h

      # Security
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 3600000
      RATE_LIMIT_MAX_REQUESTS: 5

      # SMTP (optionnel)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}

      # S3 (optionnel - configurés ensuite dans le backoffice)
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION:-eu-west-1}
      S3_BUCKET: ${S3_BUCKET}

      # hCaptcha
      HCAPTCHA_SECRET_KEY: ${HCAPTCHA_SECRET_KEY}

    depends_on:
      postgres:
        condition: service_healthy

    # On publie l’API en local seulement (CloudPanel fera le proxy)
    ports:
      - "127.0.0.1:3101:3001"

    volumes:
      - app_logs:/app/logs

    networks: [drive-ooblik-network]

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      args:
        # le front appellera /api sur le même domaine
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api}
        VITE_HCAPTCHA_SITE_KEY: ${VITE_HCAPTCHA_SITE_KEY:-10000000-ffff-ffff-ffff-000000000001}
        VITE_DEV_MODE: ${VITE_DEV_MODE:-false}
    container_name: drive-ooblik-web
    restart: unless-stopped
    depends_on: [api]

    # On publie le front en local seulement (CloudPanel fera le proxy)
    ports:
      - "127.0.0.1:3100:80"

    networks: [drive-ooblik-network]

healthcheck:
  test: ["CMD-SHELL", "wget -q --spider http://localhost:80/index.html || exit 1"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 20s


# ⚠️ On supprime le service nginx interne: CloudPanel gère déjà le reverse proxy + SSL
# (si tu veux le garder un jour, remets-le et change les ports pour éviter 80/443)

volumes:
  postgres_data:
    driver: local
    name: drive-ooblik-postgres
  app_logs:
    driver: local
    name: drive-ooblik-logs

networks:
  drive-ooblik-network:
    driver: bridge
    name: drive-ooblik-net
